// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeavingMessageClient is the client API for LeavingMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeavingMessageClient interface {
	// 添加留言
	CreateMessage(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*MessageInfo, error)
	// 留言列表
	MessageList(ctx context.Context, in *MessageListRequest, opts ...grpc.CallOption) (*MessageListResp, error)
	// 删除留言
	DeleteMessage(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*MessageEmpty, error)
}

type leavingMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewLeavingMessageClient(cc grpc.ClientConnInterface) LeavingMessageClient {
	return &leavingMessageClient{cc}
}

func (c *leavingMessageClient) CreateMessage(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*MessageInfo, error) {
	out := new(MessageInfo)
	err := c.cc.Invoke(ctx, "/stream.LeavingMessage/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavingMessageClient) MessageList(ctx context.Context, in *MessageListRequest, opts ...grpc.CallOption) (*MessageListResp, error) {
	out := new(MessageListResp)
	err := c.cc.Invoke(ctx, "/stream.LeavingMessage/MessageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavingMessageClient) DeleteMessage(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*MessageEmpty, error) {
	out := new(MessageEmpty)
	err := c.cc.Invoke(ctx, "/stream.LeavingMessage/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeavingMessageServer is the server API for LeavingMessage service.
// All implementations must embed UnimplementedLeavingMessageServer
// for forward compatibility
type LeavingMessageServer interface {
	// 添加留言
	CreateMessage(context.Context, *MessageInfo) (*MessageInfo, error)
	// 留言列表
	MessageList(context.Context, *MessageListRequest) (*MessageListResp, error)
	// 删除留言
	DeleteMessage(context.Context, *MessageInfo) (*MessageEmpty, error)
	mustEmbedUnimplementedLeavingMessageServer()
}

// UnimplementedLeavingMessageServer must be embedded to have forward compatible implementations.
type UnimplementedLeavingMessageServer struct {
}

func (UnimplementedLeavingMessageServer) CreateMessage(context.Context, *MessageInfo) (*MessageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedLeavingMessageServer) MessageList(context.Context, *MessageListRequest) (*MessageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageList not implemented")
}
func (UnimplementedLeavingMessageServer) DeleteMessage(context.Context, *MessageInfo) (*MessageEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedLeavingMessageServer) mustEmbedUnimplementedLeavingMessageServer() {}

// UnsafeLeavingMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeavingMessageServer will
// result in compilation errors.
type UnsafeLeavingMessageServer interface {
	mustEmbedUnimplementedLeavingMessageServer()
}

func RegisterLeavingMessageServer(s grpc.ServiceRegistrar, srv LeavingMessageServer) {
	s.RegisterService(&LeavingMessage_ServiceDesc, srv)
}

func _LeavingMessage_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeavingMessageServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.LeavingMessage/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeavingMessageServer).CreateMessage(ctx, req.(*MessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeavingMessage_MessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeavingMessageServer).MessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.LeavingMessage/MessageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeavingMessageServer).MessageList(ctx, req.(*MessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeavingMessage_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeavingMessageServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.LeavingMessage/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeavingMessageServer).DeleteMessage(ctx, req.(*MessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// LeavingMessage_ServiceDesc is the grpc.ServiceDesc for LeavingMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeavingMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.LeavingMessage",
	HandlerType: (*LeavingMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _LeavingMessage_CreateMessage_Handler,
		},
		{
			MethodName: "MessageList",
			Handler:    _LeavingMessage_MessageList_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _LeavingMessage_DeleteMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userop.proto",
}

// AddressClient is the client API for Address service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressClient interface {
	// 添加地址
	CreateAddress(ctx context.Context, in *AddressInfo, opts ...grpc.CallOption) (*AddressInfo, error)
	// 地址列表
	AddressList(ctx context.Context, in *AddressListRequest, opts ...grpc.CallOption) (*AddressListResp, error)
	// 修改留言
	UpdateAddress(ctx context.Context, in *AddressInfo, opts ...grpc.CallOption) (*AddressEmpty, error)
	// 删除留言
	DeleteAddress(ctx context.Context, in *AddressInfo, opts ...grpc.CallOption) (*AddressEmpty, error)
}

type addressClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressClient(cc grpc.ClientConnInterface) AddressClient {
	return &addressClient{cc}
}

func (c *addressClient) CreateAddress(ctx context.Context, in *AddressInfo, opts ...grpc.CallOption) (*AddressInfo, error) {
	out := new(AddressInfo)
	err := c.cc.Invoke(ctx, "/stream.Address/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) AddressList(ctx context.Context, in *AddressListRequest, opts ...grpc.CallOption) (*AddressListResp, error) {
	out := new(AddressListResp)
	err := c.cc.Invoke(ctx, "/stream.Address/AddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) UpdateAddress(ctx context.Context, in *AddressInfo, opts ...grpc.CallOption) (*AddressEmpty, error) {
	out := new(AddressEmpty)
	err := c.cc.Invoke(ctx, "/stream.Address/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) DeleteAddress(ctx context.Context, in *AddressInfo, opts ...grpc.CallOption) (*AddressEmpty, error) {
	out := new(AddressEmpty)
	err := c.cc.Invoke(ctx, "/stream.Address/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServer is the server API for Address service.
// All implementations must embed UnimplementedAddressServer
// for forward compatibility
type AddressServer interface {
	// 添加地址
	CreateAddress(context.Context, *AddressInfo) (*AddressInfo, error)
	// 地址列表
	AddressList(context.Context, *AddressListRequest) (*AddressListResp, error)
	// 修改留言
	UpdateAddress(context.Context, *AddressInfo) (*AddressEmpty, error)
	// 删除留言
	DeleteAddress(context.Context, *AddressInfo) (*AddressEmpty, error)
	mustEmbedUnimplementedAddressServer()
}

// UnimplementedAddressServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServer struct {
}

func (UnimplementedAddressServer) CreateAddress(context.Context, *AddressInfo) (*AddressInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedAddressServer) AddressList(context.Context, *AddressListRequest) (*AddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressList not implemented")
}
func (UnimplementedAddressServer) UpdateAddress(context.Context, *AddressInfo) (*AddressEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedAddressServer) DeleteAddress(context.Context, *AddressInfo) (*AddressEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedAddressServer) mustEmbedUnimplementedAddressServer() {}

// UnsafeAddressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServer will
// result in compilation errors.
type UnsafeAddressServer interface {
	mustEmbedUnimplementedAddressServer()
}

func RegisterAddressServer(s grpc.ServiceRegistrar, srv AddressServer) {
	s.RegisterService(&Address_ServiceDesc, srv)
}

func _Address_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Address/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).CreateAddress(ctx, req.(*AddressInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_AddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).AddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Address/AddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).AddressList(ctx, req.(*AddressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Address/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).UpdateAddress(ctx, req.(*AddressInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Address/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).DeleteAddress(ctx, req.(*AddressInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Address_ServiceDesc is the grpc.ServiceDesc for Address service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Address_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Address",
	HandlerType: (*AddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAddress",
			Handler:    _Address_CreateAddress_Handler,
		},
		{
			MethodName: "AddressList",
			Handler:    _Address_AddressList_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _Address_UpdateAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _Address_DeleteAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userop.proto",
}

// UserFavClient is the client API for UserFav service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFavClient interface {
	// 添加收藏
	CreateUserFav(ctx context.Context, in *UserFavInfo, opts ...grpc.CallOption) (*UserFavInfo, error)
	// 地址列表
	UserFavList(ctx context.Context, in *UserFavListRequest, opts ...grpc.CallOption) (*UserFavListResp, error)
	// 修改留言
	UpdateUserFav(ctx context.Context, in *UserFavInfo, opts ...grpc.CallOption) (*UserFavEmpty, error)
	// 删除留言
	DeleteUserFav(ctx context.Context, in *UserFavInfo, opts ...grpc.CallOption) (*UserFavEmpty, error)
}

type userFavClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFavClient(cc grpc.ClientConnInterface) UserFavClient {
	return &userFavClient{cc}
}

func (c *userFavClient) CreateUserFav(ctx context.Context, in *UserFavInfo, opts ...grpc.CallOption) (*UserFavInfo, error) {
	out := new(UserFavInfo)
	err := c.cc.Invoke(ctx, "/stream.UserFav/CreateUserFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFavClient) UserFavList(ctx context.Context, in *UserFavListRequest, opts ...grpc.CallOption) (*UserFavListResp, error) {
	out := new(UserFavListResp)
	err := c.cc.Invoke(ctx, "/stream.UserFav/UserFavList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFavClient) UpdateUserFav(ctx context.Context, in *UserFavInfo, opts ...grpc.CallOption) (*UserFavEmpty, error) {
	out := new(UserFavEmpty)
	err := c.cc.Invoke(ctx, "/stream.UserFav/UpdateUserFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFavClient) DeleteUserFav(ctx context.Context, in *UserFavInfo, opts ...grpc.CallOption) (*UserFavEmpty, error) {
	out := new(UserFavEmpty)
	err := c.cc.Invoke(ctx, "/stream.UserFav/DeleteUserFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFavServer is the server API for UserFav service.
// All implementations must embed UnimplementedUserFavServer
// for forward compatibility
type UserFavServer interface {
	// 添加收藏
	CreateUserFav(context.Context, *UserFavInfo) (*UserFavInfo, error)
	// 地址列表
	UserFavList(context.Context, *UserFavListRequest) (*UserFavListResp, error)
	// 修改留言
	UpdateUserFav(context.Context, *UserFavInfo) (*UserFavEmpty, error)
	// 删除留言
	DeleteUserFav(context.Context, *UserFavInfo) (*UserFavEmpty, error)
	mustEmbedUnimplementedUserFavServer()
}

// UnimplementedUserFavServer must be embedded to have forward compatible implementations.
type UnimplementedUserFavServer struct {
}

func (UnimplementedUserFavServer) CreateUserFav(context.Context, *UserFavInfo) (*UserFavInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFav not implemented")
}
func (UnimplementedUserFavServer) UserFavList(context.Context, *UserFavListRequest) (*UserFavListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFavList not implemented")
}
func (UnimplementedUserFavServer) UpdateUserFav(context.Context, *UserFavInfo) (*UserFavEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserFav not implemented")
}
func (UnimplementedUserFavServer) DeleteUserFav(context.Context, *UserFavInfo) (*UserFavEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFav not implemented")
}
func (UnimplementedUserFavServer) mustEmbedUnimplementedUserFavServer() {}

// UnsafeUserFavServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFavServer will
// result in compilation errors.
type UnsafeUserFavServer interface {
	mustEmbedUnimplementedUserFavServer()
}

func RegisterUserFavServer(s grpc.ServiceRegistrar, srv UserFavServer) {
	s.RegisterService(&UserFav_ServiceDesc, srv)
}

func _UserFav_CreateUserFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFavServer).CreateUserFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.UserFav/CreateUserFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFavServer).CreateUserFav(ctx, req.(*UserFavInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFav_UserFavList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFavServer).UserFavList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.UserFav/UserFavList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFavServer).UserFavList(ctx, req.(*UserFavListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFav_UpdateUserFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFavServer).UpdateUserFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.UserFav/UpdateUserFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFavServer).UpdateUserFav(ctx, req.(*UserFavInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFav_DeleteUserFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFavServer).DeleteUserFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.UserFav/DeleteUserFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFavServer).DeleteUserFav(ctx, req.(*UserFavInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFav_ServiceDesc is the grpc.ServiceDesc for UserFav service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFav_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.UserFav",
	HandlerType: (*UserFavServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserFav",
			Handler:    _UserFav_CreateUserFav_Handler,
		},
		{
			MethodName: "UserFavList",
			Handler:    _UserFav_UserFavList_Handler,
		},
		{
			MethodName: "UpdateUserFav",
			Handler:    _UserFav_UpdateUserFav_Handler,
		},
		{
			MethodName: "DeleteUserFav",
			Handler:    _UserFav_DeleteUserFav_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userop.proto",
}
